init(application) {

....

		this.texture = new CGFtexture(this, "texture.jpg");
		this.appearance.setTexture(this.texture);
		this.appearance.setTextureWrap ('REPEAT', 'REPEAT');
		
		this.surfaces = [];
		

		this.makeSurface("0", 1, // degree on U: 2 control vertexes U
						 1, // degree on V: 2 control vertexes on V
						[	// U = 0
							[ // V = 0..1;
								 [-2.0, -2.0, 0.0, 1 ],
								 [-2.0,  2.0, 0.0, 1 ]
								
							],
							// U = 1
							[ // V = 0..1
								 [ 2.0, -2.0, 0.0, 1 ],
								 [ 2.0,  2.0, 0.0, 1 ]							 
							]
						], // translation of surface 
						[-7.5,0,0]);

		this.makeSurface("1", 2, // degree on U: 3 control vertexes U
						 1, // degree on V: 2 control vertexes on V
						[	// U = 0
							[ // V = 0..1;
								 [ -1.5, -1.5, 0.0, 1 ],
								 [ -1.5,  1.5, 0.0, 1 ]
								
							],
							// U = 1
							[ // V = 0..1
								 [ 0, -1.5, 3.0, 1 ],
								 [ 0,  1.5, 3.0, 1 ]							 
							],
							// U = 2
							[ // V = 0..1							 
								[ 1.5, -1.5, 0.0, 1 ],
								[ 1.5,  1.5, 0.0, 1 ]
							]
						], // translation of surface 
						[-2.5,0,0]);

		this.makeSurface("2", 2, // degree on U: 3 control vertexes U
						 3, // degree on V: 4 control vertexes on V
						[	// U = 0
							[ // V = 0..3;
								 [ -1.5, -1.5, 0.0, 1 ],
								 [ -2.0, -2.0, 2.0, 1 ],
								 [ -2.0,  2.0, 2.0, 1 ],
								 [ -1.5,  1.5, 0.0, 1 ]
								
							],
							// U = 1
							[ // V = 0..3
								 [ 0, 0, 3.0, 1 ],
								 [ 0, -2.0, 3.0, 5 ],
								 [ 0,  2.0, 3.0, 5 ],
								 [ 0,  0, 3.0, 1 ]							 
							],
							// U = 2
							[ // V = 0..3							 
								 [ 1.5, -1.5, 0.0, 1 ],
								 [ 2.0, -2.0, 2.0, 1 ],
								 [ 2.0,  2.0, 2.0, 1 ],
								 [ 1.5,  1.5, 0.0, 1 ]
							]
						], // translation of surface 
						[2.5,0,0]);

		this.makeSurface("3", 2, // degree on U: 3 control vertexes U
						3, // degree on V: 4 control vertexes on V
						[	// U = 0
							[ // V = 0..3;
								 [ -2.0, -2.0, 1.0, 1 ],
								 [ -2.0, -1.0, -2.0, 1 ],
								 [ -2.0, 1.0, 5.0, 1 ],
								 [ -2.0, 2.0, -1.0, 1 ]
							],
							// U = 1
							[ // V = 0..3
								 [ 0, -2.0, 0, 1 ],
								 [ 0, -1.0, -1.0, 5 ],
								 [ 0, 1.0, 1.5, 5 ],
								 [ 0, 2.0, 0, 1 ]
							],
							// U = 2
							[ // V = 0..3
								 [ 2.0, -2.0, -1.0, 1 ],
								 [ 2.0, -1.0, 2.0, 1 ],
								 [ 2.0, 1.0, -5.0, 1 ],
								 [ 2.0, 2.0, 1.0, 1 ]
							]
						], // translation of surface 
						[7.5,0,0]);

		
	};

	makeSurface(id, degree1, degree2, controlvertexes, translation) {
			
		var nurbsSurface = new CGFnurbsSurface(degree1, degree2, controlvertexes);

		var obj = new CGFnurbsObject(this, 20, 20, nurbsSurface ); // must provide an object with the function getPoint(u, v) (CGFnurbsSurface has it)
		
		this.surfaces.push(obj);	
		this.translations.push(translation);

	}

	
	
	
	
display() 	
	{


....


		// draw surfaces
		this.appearance.apply();
		for (i =0; i<this.surfaces.length; i++) {
			this.pushMatrix();
		
			this.translate(this.translations[i][0], this.translations[i][1], this.translations[i][2]);

			this.surfaces[i].display();
			this.popMatrix();
		}
	}